# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %% [markdown]
# 
# %% [markdown]
# # Applied Exercise: College Dataset
# %% [markdown]
# # No. 8
# %% [markdown]
# ### (a) Use the read.csv() function to read the data into R. Call the loaded data college. Make sure that you have the directory set to the correct location for the data.

# %%
# importing packages
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


# %%
#reading in our csv
df = pd.read_csv('College.csv')
df.head()


# %%
#making a copy of our dataset
df_copy = df.copy

# %% [markdown]
# # (b) set the index as  the first col

# %%
# here we are setting the first column as our index
#df = df.set_index(['Unnamed: 0'], append = True, verify_integrity = True)

# we are naming the column the holds all our college names to "Names"
#df.rename_axis([None, 'Name'], inplace = True)

# checking the changes
df.head()

# %% [markdown]
# # c
# # i. Use the summary() function to produce a numerical summary of the variables in the data set.

# %%
# Data Summary
df.describe()

# %% [markdown]
# # ii. Use the pairs() function to produce a scatterplot matrix of the first ten columns or variables of the data.

# %%
# Pair plot first 10 columns
sns.pairplot(df.iloc[:,1:11])

# %% [markdown]
# # iii. Use the plot() function to produce side-by-side boxplots of Outstate versus Private

# %%
# side by side box plot
ax = sns.boxplot(x="Private", y="Outstate",data = df)

# %% [markdown]
# # iv. Create a new qualitative variable, called Elite, by binning the Top10perc variable. We are going to divide universities into two groups based on whether or not the proportion of students coming from the top 10 % of their high school classes exceeds 50 %.¶

# %%
# build a new variable called elite
df['Elite'] = np.where(df['Top10perc'] > 50, 'yes','no',)
df.head()


# %%
#how many elite colleges are there
df['Elite'].value_counts()


# %%
# creating a new dataframe
eliteColleges  = df[df['Elite'] == 'yes']
eliteColleges.head()


# %%
#Side by side box plot of elite colleges in state
sns.boxplot(x=df['Elite'], y=df['Outstate'])


# %%
#reading in our csv
df = pd.read_csv('College.csv')
df.head()

# %% [markdown]
# # v. Use the hist() function to produce some histograms with differing numbers of bins for a few of the quantitative variables.¶

# %%
# before making the hsitogram we need to select three variable (Apps, Enrollment, Acceptance)
##(Apps, Enrollment, Acceptance)

# then we will divide each varible into into  3 bins: High : Medium : Low 
df['PhD'] = pd.cut(df['PhD'],bins=5,labels=['Very High','High','Medium','Low','Very Low'])
df['Enroll'] = pd.cut(df['Enroll'],bins=3,labels=['High','Medium','Low'])
df['Accept'] = pd.cut(df['Accept'],bins=5,labels=['Very High','High','Medium','Low','Very Low'])

# Lastly we can plot each varible

# making a varible for matplo
fig = plt.figure()

plt.subplot(2,2,1)
df['PhD'].value_counts().plot.bar(title = 'PhD')
plt.subplot(2,2,2)
df['Enroll'].value_counts().plot.bar(title = 'Enroll')
plt.subplot(2,2,3)
df['Accept'].value_counts().plot.bar(title = 'Accept')

#Spacing out the figs 
fig.subplots_adjust(hspace=1)




# %% [markdown]
# # 9. This exercise is using the Auto dataset. Check to see if there are any missing values

# %%
# reading in the csv
df = pd.read_csv('Auto.csv')
df.head()


# %%
# checking for missing values 
df.isnull().values.any()
# missing values are filled with '?' I found this out when I tried to build a dataframe and take the range, mean, and std
df = df.drop(df[df.values == '?'].index)


# %%
# checking dtypes to see which varibles are quant or qual
df.describe()

# making a new varible to store the quant and qual perdictors
datatypes = {'quant': ['mpg','cylinders','displacement','horsepower','weight','acceleration'],'qual': ['origin','name']}
auto_quant = df[datatypes['quant']].astype(np.float_)


# %%
# dataframe for range, mean, std 
pd.DataFrame({'range': auto_quant.max() - auto_quant.min(),
              'mean': auto_quant.mean(),
              'std': auto_quant.std()})


# %%
# first we will drop the 10th and 85th observation
#df.loc.index[85,10]
auto_quant_df= auto_quant.drop(auto_quant.index[10:85])

#then check the range mean and STD
pd.DataFrame({'range': auto_quant_df.max() - auto_quant_df.min(),
              'mean': auto_quant_df.mean(),
              'std': auto_quant_df.std()})


# %%
autoQuant = pd.concat([auto_quant, df[datatypes['qual']]], axis = 1)
sns.pairplot(autoQuant)

# %% [markdown]
# # Comments
# 
#  - There may be a negative correlation between horsepower and displacment.
#  - There may be a postive correlation between weight and horsepower.
#  - There is np strong correlation between weight and acceleration and mpg and acceleration
# 
#  (f) Suppose that we wish to predict gas mileage (mpg) on the basis of the other variables. Do your plots suggest that any of the other variables might be useful in predicting mpg? ustify your answer.
# 
#  - we might use displacement, weight, and horsepower given there correlation to MPG

